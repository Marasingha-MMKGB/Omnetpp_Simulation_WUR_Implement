
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000791  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e6  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:
#include <util/delay.h>

// Function to initialize ADC
void ADC_Init() {
	// Set ADC prescaler to 128 (for 16MHz clock)
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	87 60       	ori	r24, 0x07	; 7
  88:	80 83       	st	Z, r24
	
	// Set reference voltage to internal 2.56V
	ADMUX |= (1 << REFS1) | (1 << REFS0);
  8a:	ac e7       	ldi	r26, 0x7C	; 124
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	8c 91       	ld	r24, X
  90:	80 6c       	ori	r24, 0xC0	; 192
  92:	8c 93       	st	X, r24
	
	// Enable ADC
	ADCSRA |= (1 << ADEN);
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <ADC_Read>:
}

// Function to read ADC value from a specific channel
uint16_t ADC_Read(uint8_t channel) {
	// Clear the channel bits
	ADMUX &= 0xF8;
  9c:	ec e7       	ldi	r30, 0x7C	; 124
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	90 83       	st	Z, r25
	// Set the channel to read from
	ADMUX |= (channel & 0x07);
  a6:	90 81       	ld	r25, Z
  a8:	87 70       	andi	r24, 0x07	; 7
  aa:	98 2b       	or	r25, r24
  ac:	90 83       	st	Z, r25
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
	
	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));
  b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  bc:	86 fd       	sbrc	r24, 6
  be:	fc cf       	rjmp	.-8      	; 0xb8 <ADC_Read+0x1c>
	
	// Return the ADC value
	return ADC;
  c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c8:	08 95       	ret

000000ca <main>:

int main(void) {
	// Initialize ADC
	ADC_Init();
  ca:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>
	
	// Set PC2 and PC3 as output pins
	DDRC |= (1 << PC2) | (1 << PC3);
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	87 b9       	out	0x07, r24	; 7
	
	// Loop indefinitely
	while (1) {
		// Read potentiometer value from ADC channel 7
		uint16_t potValue = ADC_Read(7);
  d4:	87 e0       	ldi	r24, 0x07	; 7
  d6:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
		
		// Calculate motor speed based on potentiometer value
		// Here, we'll map the potentiometer range (0-1023) to a motor speed range (0-255)
		uint8_t motorSpeed = potValue >> 2; // Divide by 4
  da:	96 95       	lsr	r25
  dc:	87 95       	ror	r24
  de:	96 95       	lsr	r25
  e0:	87 95       	ror	r24
		
		// Set motor speed by controlling PC2 and PC3 outputs
		if (motorSpeed > 0) {
  e2:	88 23       	and	r24, r24
  e4:	39 f0       	breq	.+14     	; 0xf4 <main+0x2a>
			PORTC |= (1 << PC2); // Set PC2 (IN1)
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PC3); // Clear PC3 (IN2)
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	06 c0       	rjmp	.+12     	; 0x100 <main+0x36>
			} else {
			PORTC &= ~(1 << PC2); // Clear PC2 (IN1)
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PC3); // Clear PC3 (IN2)
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9c e9       	ldi	r25, 0x9C	; 156
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x3a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x40>
 10a:	00 00       	nop
 10c:	e3 cf       	rjmp	.-58     	; 0xd4 <main+0xa>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
